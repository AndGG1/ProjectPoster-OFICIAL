If the properties file is alongside your app in your IntelliJ project, you can configure it to be accessible to your app but not directly exposed or copied by others. Here's an approach you could try:

1. Keep the Properties File Outside the Packaged Artifact
By default, when you build your app (e.g., into a JAR or WAR file), IntelliJ may include the properties file in the artifact. To avoid this, make sure the file is in a directory that is not included in the build process.

In your File -> Project Structure -> Artifacts settings, exclude the properties file from the artifact output.

2. Access the File Dynamically at Runtime
Instead of embedding the properties file in the packaged app, your application can be configured to load it from a specific location on your computer. For example:

java
import java.io.FileInputStream;
import java.util.Properties;

public class App {
    public static void main(String[] args) throws Exception {
        Properties props = new Properties();
        props.load(new FileInputStream("C:/path/to/your/file.properties"));

        // Example: Access a property
        String value = props.getProperty("key");
        System.out.println(value);
    }
}
This way, the app always points to the file on your computer.

3. Prevent Copies of the File
If the file isn't included in the artifact, users won't get a copy when they download the app.

However, if your app updates or modifies the file, ensure it's writing only to the specified path on your computer (and not creating new files elsewhere).

4. Add Documentation for Users
Inform users of your app that it requires access to the properties file at a specific location. You can provide a way for them to configure the path if needed.

Caveat:
This setup makes the properties file only accessible on your computer or any system where the file exists. If users run the app on their own machines, they won't be able to interact with the file unless it's made available to them (e.g., via hosting or sharing it).

Would you like detailed help with implementing any of these steps, or a tailored example for your use case? Let me know!